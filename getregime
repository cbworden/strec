#!/usr/bin/env python

#stdlib imports
import sys
import argparse

#third party imports
import pandas as pd
import numpy as np

#local imports
from strec.feregion import FERegions
from strec.cmt import get_tensor_params_from_nodal

def get_input_columns(row):
    #row is a pandas series object
    if not row.str.contains('^lat',case=False).any():
        raise Exception('Missing "lat" column in input.')
    if not row.str.contains('^lon',case=False).any():
        raise Exception('Missing "lon" column in input.')
    if not row.str.contains('^depth',case=False).any():
        raise Exception('Missing "depth" column in input.')
    lat = row[row.str.contains('^lat',case=False)][0]
    lon = row[row.str.contains('^lon',case=False)][0]
    depth = row[row.str.contains('^depth',case=False)][0]

    strike = dip = rake = magnitude = None
    has_tensor = 0
    if row.str.contains('^strike',case=False).any():
        strike = row[row.str.contains('^strike',case=False)][0]
        has_tensor += 1
    if row.str.contains('^dip',case=False).any():
        dip = row[row.str.contains('^dip',case=False)][0]
        has_tensor += 1
    if row.str.contains('^rake',case=False).any():
        rake = row[row.str.contains('^rake',case=False)][0]
        has_tensor += 1
    if row.str.contains('^mag',case=False).any():
        magnitude = row[row.str.contains('^mag',case=False)][0]
        has_tensor += 1
    tensor_params = None
    if has_tensor == 4:
        tensor_params = get_tensor_params_from_nodal(strike,dip,rake,magnitude)

    return (lat,lon,depth,tensor_params)
    
        
def main(pparser,args):
    if args.eqinfo and args.input_file:
        print('Choose either an input file or an input hypocenter.')
        pparser.print_help()
        sys.exit(1)

    if not args.eqinfo and not args.input_file:
        print('Must supply an input file or an input hypocenter.')
        pparser.print_help()
        sys.exit(1)

    if args.output_format in ['excel','csv'] and not args.output_file:
        print('If output format is excel or csv then you must designate an output file.')
        pparser.print_help()
        sys.exit(1)

    if args.output_file and args.output_format not in ['excel','csv']:
        print('If output file is designated, output format must be one of excel or csv.')
        pparser.print_help()
        sys.exit(1)
        
    if args.moment:
        strike,dip,rake,magnitude = args.moment
        tensor_params = get_tensor_params_from_nodal(strike,dip,rake,magnitude)
    else:
        tensor_params = None
    
    if args.input_file:
        df = read_input_file(args.input_file)
    elif args.eqinfo:
        lat,lon,depth = args.eqinfo
        d = {'lat':[lat],'lon':[lon],'depth':[depth]}
        df = pd.DataFrame(d)

    fereg = FERegions()
    if args.output_file:
        outrows = []
    for idx,row in df.iterrows():
        lat,lon,depth,tensor_params = get_input_columns(row)
        results = fereg.getRegimeInfo(lat,lon,depth,tensor_params,config)
        if args.output_file:
            output_row = merge_output_columns(row,results)
            outrows.append(output_row)
        else:
            output_row = row
            render_output_row(output_row,args.output_format)
    if args.output_file:
        outdf = pd.DataFrame(outrows)
        if args.output_format == 'csv':
            outdf.to_csv(args.output_file)
        else:
            outdf.to_excel(args.output_file)
        
        
if __name__ == '__main__':
    usage = """Determine most likely seismo-tectonic regime of given earthquake.
    STREC - Seismo-Tectonic Regionalization of Earthquake Catalogs

The output will consist (at least) of the following "columns" of data:

Lat - Input latitude of earthquake.
Lon - Input longitude of earthquake.
Depth - Input depth of earthquake.

SourceRegime - The characterization of the earthquake source, i.e. Active Crustal Shallow ("ACRSh"), Subduction Zone Interface ("SZInter"), etc.
TectonicDomain - The regional domain in which the earthquake occurs, i.e., "Subduction Zone (on-shore)", "SCR (above slab)", etc. 
FocalMechanismType - One of 'SS','RS','NM','ALL' (Strike-Slip, Reverse, Normal, or undetermined.)
FERegionName - The name of the Flinn-Engdahl region where the earthquake occurred.
FERegionNumber - The number of the Flinn-Engdahl region where the earthquake occurred.

FocalMechanismParameters
  - TAxis
    - Strike Strike angle of the T axis.
    - Plunge Plunge angle of the T axis.
  - PAxis
    - Strike Strike angle of the P axis.
    - Plunge Plunge angle of the P axis.
  - NAxis
    - Strike Strike angle of the N axis.
    - Plunge Plunge angle of the N axis.

SlabParameters
  - Strike Strike angle of the slab model.
  - Dip Dip angle of the slab model.
  - Depth Depth to interface as determined by the slab model.
  - Outside Boolean indicating whether the point in question is inside the slab grid/trench but outside the area of the model.
  - Source 'grid' (USGS gridded Slab model) or 'trench' (line of strike angles and assumed constant dip), or 'NA'.

IsInterfaceLike Boolean indicating whether the input strike angle is similar to the slab strike angle.
WithinInterfaceDepthInterval Boolean indicating whether the earthquake depth is within a (configurable) tolerance of the interface depth.
WithinIntraslabDepthInterval Boolean indicating whether the earthquake depth is below a (configurable) tolerance of the interface depth.


    """
    input_file_help = '''Input files can be CSV or Excel format (%(prog)s  will attempt to determine
format automatically) and MUST include the following columns (case doesn't matter):

Lat Numeric latitude of input earthquake.
Lon Numeric longitude of input earthquake.
Depth Numeric depth of input earthquake.

If the file has the following columns, they will be used to determine focal mechanism:

Strike Strike angle of first nodal plane (degrees).
Dip Dip angle of first nodal plane (degrees).
Rake Rake angle of first nodal plane (degrees).
Magnitude Magnitude of input earthquake.

Any other columns present in the input will be copied to the output.
'''
    output_format_help = '''The output format must be one of the following:
 
pretty - A human readable pretty-printed representation of the output.
csv - A CSV output, one earthquake per line.
excel - Microsoft Excel format, one earthquake per line.
json - A JSON representation of the output

'''
    
    parser = argparse.ArgumentParser(description=usage,formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-e","--earthquake-info", nargs=3,metavar='LAT LON DEPTH',type=float,dest="eqinfo",
                        help='lat,lon,depth of earthquake')
    parser.add_argument("-m", "--moment-info",dest="moment",
                      metavar=('STRIKE','DIP','RAKE','MAGNITUDE'),nargs=4,
                      help='Specify the moment tensor by providing strike, dip, rake (of first nodal plane) and magnitude')
    parser.add_argument("-i", "--input-file",dest="input_file",
                      metavar='INPUTFILE',
                      help=input_file_help)
    parser.add_argument("-o", "--output-format",dest="output_format",
                      metavar='OUTPUT FORMAT',choices=('pretty','csv','excel','json'),
                      help=output_format_help)
    parser.add_argument("-f", "--output-file",dest="output_file",help='Output filename')
    pargs = parser.parse_args()

    main(parser,pargs)
